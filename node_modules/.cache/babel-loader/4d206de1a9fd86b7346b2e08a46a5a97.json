{"ast":null,"code":"var _jsxFileName = \"/Users/tonicaktas/Desktop/reactMovieApp/src/components/Movie/Movie.js\";\nimport React, { Component } from 'react'; //import api key from config\n\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            // fetchar actors in setState callback function\n            const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"/credits?api_key=\").concat(API_KEY);\n            fetch(endpoint).then(result => result.json()).then(result => {\n              //Process data from result to get \"Directors\". filter() filterar ut all data från result och ger tillbaka ny array med data i result.\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(\"\".concat(this.props.match.params.movieId), JSON.stringify(this.state));\n              });\n              console.log(result.cast);\n            });\n            console.log(result);\n          });\n        }\n      }).catch(error => console.error('Error', error));\n    };\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem(\"\".concat(this.props.match.params.movieId))) {} else {\n      this.setState({\n        loading: true\n      }); //först fetcha filmen\n\n      const endpoint = \"\".concat(API_URL, \"movie/\").concat(this.props.match.params.movieId, \"?api_key=\").concat(API_KEY, \"&language=en-US\");\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, this.state.movie ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      movie: this.props.location.movieName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(MovieInfo, {\n      movie: this.state.movie,\n      directors: this.state.directors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(MovieInfoBar, {\n      time: this.state.movie.runtime,\n      budget: this.state.movie.budget,\n      revenue: this.state.movie.revenue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })) : null, this.state.actors ? React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(FourColGrid, {\n      header: 'Actors',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, this.state.actors.map((element, i) => {\n      return React.createElement(Actor, {\n        key: i,\n        actor: element,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      });\n    }))) : null, !this.state.actors && !this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"No Movie Found\") : null, this.state ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["/Users/tonicaktas/Desktop/reactMovieApp/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","IMAGE_BASE_URL","POSTER_SIZE","BACKDROP_SIZE","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","fetch","then","result","json","status_code","setState","props","match","params","movieId","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","console","log","catch","error","componentDidMount","getItem","render","location","movieName","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n//import api key from config\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE} from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\n\n\nclass Movie extends Component {\nstate = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false\n}\n\ncomponentDidMount(){\n    if(localStorage.getItem(`${this.props.match.params.movieId}`)){\n\n    } else {\n\n   \n    this.setState({loading:true})\n    //först fetcha filmen\n    const endpoint = `${API_URL}movie/${this.props.match.params.movieId}?api_key=${API_KEY}&language=en-US`;\n    this.fetchItems(endpoint);\n} }\n\nfetchItems = (endpoint) => {\n    fetch(endpoint)\n    .then(result => result.json())\n    .then(result => {\n        if(result.status_code) {\n            this.setState({loading: false});\n\n        } else {\n            this.setState({movie:result}, () => {\n                \n                // fetchar actors in setState callback function\n                const endpoint = `${API_URL}movie/${this.props.match.params.movieId}/credits?api_key=${API_KEY}`;\n                fetch(endpoint)\n                .then(result => result.json())\n                .then(result => {\n                    //Process data from result to get \"Directors\". filter() filterar ut all data från result och ger tillbaka ny array med data i result.\n                    const directors = result.crew.filter((member) => member.job === \"Director\");\n\n                    this.setState({\n                        actors: result.cast,\n                        directors,\n                        loading: false\n                    }, () => {\n                        localStorage.setItem(`${this.props.match.params.movieId}`, JSON.stringify(this.state))\n                    })\n                    console.log(result.cast);\n                })\n                console.log(result);\n            })\n        }\n    })\n    .catch(error => console.error('Error', error))\n}\n\n\n\n    render(){\n        return(\n            <div className=\"rmdb-movie\">\n            {this.state.movie ? \n                <div>\n                    <Navigation movie={this.props.location.movieName} />\n                    <MovieInfo movie={this.state.movie } directors={this.state.directors} />\n                    <MovieInfoBar time={this.state.movie.runtime} budget={this.state.movie.budget} revenue={this.state.movie.revenue} />\n                </div>\n        \n        \n                 : null }\n                 {this.state.actors ?\n                    <div className=\"rmdb-movie-grid\">\n                        <FourColGrid header={'Actors'}>\n                        \n                        {/*loopar igenom skådisar */}\n                        {this.state.actors.map((element, i) => {\n                            return <Actor key={i} actor={element} />\n                        })} \n                        </FourColGrid>\n                    </div> \n                : null }\n                {!this.state.actors && !this.state.loading ? <h1>No Movie Found</h1> : null}\n                {this.state ? <Spinner /> : null}\n            </div>\n        )\n    }\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}