{"ast":null,"code":"var _jsxFileName = \"/Users/tonicaktas/Desktop/reactMovieApp/src/components/Home/Home.js\";\nimport React, { Component } from 'react';\nimport HeroImage from '../elements/HeroImage/HeroImage';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE } from '../../config';\nimport SearchBar from '../elements/SearchBar/SearchBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport MovieThumb from '../elements/MovieThumb/MovieThumb';\nimport LoadMoreBtn from '../elements/LoadMoreBtn/LoadMoreBtn';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Home.css';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      HeroImage: null,\n      loading: false,\n      currentPage: 0,\n      totalPages: 0,\n      searchTerm: ''\n    };\n\n    this.fetchItems = endpoint => {\n      //hämtar data med fetch(). fetch returnar 'promise'. Promise är nått som kommer resolvas i framtiden, vi kan vänta att den ska resolvas med then()\n      fetch(endpoint) //convertera resultat till json \n      .then(result => result.json()).then(result => {\n        this.setState({\n          //kopiera gamla movies och appendar nya till den \n          movies: [...this.state.movies, ...result.results],\n          //kolla om HeroImage finns, om inte så lägger vi till första bilden som står i tur\n          HeroImage: this.state.heroImage || result.results[0],\n          loading: false,\n          currentPage: result.page\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loading: true\n    }); // specifiera url från vart vi hämtar data\n\n    const endpoint = \"\".concat(API_URL, \"movie/popular?api_key=\").concat(API_KEY, \"&language=en-US&page=1}\"); // Hämtar data\n\n    this.fetchItems(endpoint);\n  }\n\n  //class somponent user render -> return method\n  render() {\n    return React.createElement(\"div\", {\n      className: \"rmbd-home\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(HeroImage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(SearchBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(FourColGrid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(LoadMoreBtn, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/tonicaktas/Desktop/reactMovieApp/src/components/Home/Home.js"],"names":["React","Component","HeroImage","API_URL","API_KEY","IMAGE_BASE_URL","POSTER_SIZE","BACKDROP_SIZE","SearchBar","FourColGrid","MovieThumb","LoadMoreBtn","Spinner","Home","state","movies","loading","currentPage","totalPages","searchTerm","fetchItems","endpoint","fetch","then","result","json","setState","results","heroImage","page","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2CC,WAA3C,EAAwDC,aAAxD,QAA4E,cAA5E;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,WAAP,MAAwB,qCAAxB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAEA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBZ,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBa,KADyB,GACjB;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJb,MAAAA,SAAS,EAAE,IAFP;AAGJc,MAAAA,OAAO,EAAE,KAHL;AAIJC,MAAAA,WAAW,EAAE,CAJT;AAKJC,MAAAA,UAAU,EAAE,CALR;AAMJC,MAAAA,UAAU,EAAE;AANR,KADiB;;AAAA,SAmBzBC,UAnByB,GAmBXC,QAAD,IAAc;AACvB;AACAC,MAAAA,KAAK,CAACD,QAAD,CAAL,CACA;AADA,OAECE,IAFD,CAEMC,MAAM,IAAIA,MAAM,CAACC,IAAP,EAFhB,EAICF,IAJD,CAIMC,MAAM,IAAI;AACZ,aAAKE,QAAL,CAAc;AACV;AACAX,UAAAA,MAAM,EAAE,CAAE,GAAG,KAAKD,KAAL,CAAWC,MAAhB,EAAwB,GAAGS,MAAM,CAACG,OAAlC,CAFE;AAGV;AACAzB,UAAAA,SAAS,EAAE,KAAKY,KAAL,CAAWc,SAAX,IAAwBJ,MAAM,CAACG,OAAP,CAAe,CAAf,CAJzB;AAKVX,UAAAA,OAAO,EAAE,KALC;AAMVC,UAAAA,WAAW,EAAEO,MAAM,CAACK;AANV,SAAd;AASH,OAdD;AAeH,KApCwB;AAAA;;AAWzBC,EAAAA,iBAAiB,GAAI;AACjB,SAAKJ,QAAL,CAAc;AAAEV,MAAAA,OAAO,EAAE;AAAX,KAAd,EADiB,CAEjB;;AACA,UAAMK,QAAQ,aAAMlB,OAAN,mCAAsCC,OAAtC,4BAAd,CAHiB,CAIjB;;AACA,SAAKgB,UAAL,CAAgBC,QAAhB;AACH;;AAwBL;AACIU,EAAAA,MAAM,GAAE;AACJ,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAGI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAII,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AASH;;AApDwB;;AAuD7B,eAAelB,IAAf","sourcesContent":["import React, {Component} from 'react';\nimport HeroImage from '../elements/HeroImage/HeroImage';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, POSTER_SIZE, BACKDROP_SIZE} from '../../config';\nimport SearchBar from '../elements/SearchBar/SearchBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid';\nimport MovieThumb from '../elements/MovieThumb/MovieThumb';\nimport LoadMoreBtn from '../elements/LoadMoreBtn/LoadMoreBtn';\nimport Spinner from '../elements/Spinner/Spinner';\n\nimport './Home.css';\n\nclass Home extends Component {\n    state = {\n        movies: [],\n        HeroImage: null,\n        loading: false,\n        currentPage: 0,\n        totalPages: 0,\n        searchTerm: ''\n    }\n\n\n    componentDidMount()  {\n        this.setState({ loading: true});\n        // specifiera url från vart vi hämtar data\n        const endpoint = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US&page=1}`;\n        // Hämtar data\n        this.fetchItems(endpoint);\n    }\n\n    fetchItems = (endpoint) => {\n        //hämtar data med fetch(). fetch returnar 'promise'. Promise är nått som kommer resolvas i framtiden, vi kan vänta att den ska resolvas med then()\n        fetch(endpoint)\n        //convertera resultat till json \n        .then(result => result.json())\n\n        .then(result => {\n            this.setState({\n                //kopiera gamla movies och appendar nya till den \n                movies: [ ...this.state.movies, ...result.results ],\n                //kolla om HeroImage finns, om inte så lägger vi till första bilden som står i tur\n                HeroImage: this.state.heroImage || result.results[0],\n                loading: false,\n                currentPage: result.page,\n\n            })\n        })\n    }\n\n\n\n\n//class somponent user render -> return method\n    render(){\n        return(\n            <div className=\"rmbd-home\">\n                <HeroImage />\n                <SearchBar />\n                <FourColGrid />\n                <Spinner />\n                <LoadMoreBtn />\n            </div>\n        )\n    }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}